# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# see kafka.server.KafkaConfig for additional details and defaults

############################# Server Basics #############################

# The id of the broker. This must be set to a unique integer for each broker.
# broker在集群中的唯一标识(>=0),当该服务器的IP地址发生改变时，broker.id没有变化，不会影响consumers
broker.id=1

############################# Socket Server Settings #############################

# The address the socket server listens on. It will get the value returned from 
# java.net.InetAddress.getCanonicalHostName() if not configured.
#   FORMAT:
#     listeners = listener_name://host_name:port
#   EXAMPLE:
#     listeners = PLAINTEXT://your.host.name:9092
listeners=PLAINTEXT://127.0.0.1:9092

# Hostname and port the broker will advertise to producers and consumers. If not set, 
# it uses the value for "listeners" if configured.  Otherwise, it will use the value
# returned from java.net.InetAddress.getCanonicalHostName().

# Maps listener names to security protocols, the default is for them to be the same. See the config documentation for more details
#listener.security.protocol.map=PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL

# The number of threads that the server uses for receiving requests from the network and sending responses to the network
# broker处理消息的最大线程数，一般情况下不需要去修改
num.network.threads=3

# The number of threads that the server uses for processing requests, which may include disk I/O
# broker处理磁盘IO的线程数，数值应该大于你的硬盘数
num.io.threads=8

# The send buffer (SO_SNDBUF) used by the socket server
# socket的发送缓冲区，socket的调优参数SO_SNDBUFF
socket.send.buffer.bytes=102400

# The receive buffer (SO_RCVBUF) used by the socket server
# socket的接受缓冲区，socket的调优参数SO_RCVBUFF
socket.receive.buffer.bytes=102400

# The maximum size of a request that the socket server will accept (protection against OOM)
# socket请求的最大数值，防止serverOOM，message.max.bytes必然要小于socket.request.max.bytes，会被topic创建时的指定参数覆盖
socket.request.max.bytes=104857600


############################# Log Basics #############################

# A comma separated list of directories under which to store log files
# kafka数据的存放地址，多个地址的话用逗号分割 /opt/log/kafka/logs1，/opt/log/kafka/logs2
log.dirs=/kafka/kafka-logs-c29a82bb5b85

# The default number of log partitions per topic. More partitions allow greater
# parallelism for consumption, but this will also result in more files across
# the brokers.
# 每个topic的分区个数，若是在topic创建时候没有指定的话会被topic创建时的指定参数覆盖
num.partitions=1

# The number of threads per data directory to be used for log recovery at startup and flushing at shutdown.
# This value is recommended to be increased for installations with data dirs located in RAID array.
num.recovery.threads.per.data.dir=1

############################# Internal Topic Settings  #############################
# The replication factor for the group metadata internal topics "__consumer_offsets" and "__transaction_state"
# For anything other than development testing, a value greater than 1 is recommended for to ensure availability such as 3.
offsets.topic.replication.factor=1
transaction.state.log.replication.factor=1
transaction.state.log.min.isr=1

############################# Log Flush Policy #############################

# Messages are immediately written to the filesystem but by default we only fsync() to sync
# the OS cache lazily. The following configurations control the flush of data to disk.
# There are a few important trade-offs here:
#    1. Durability: Unflushed data may be lost if you are not using replication.
#    2. Latency: Very large flush intervals may lead to latency spikes when the flush does occur as there will be a lot of data to flush.
#    3. Throughput: The flush is generally the most expensive operation, and a small flush interval may lead to excessive seeks.
# The settings below allow one to configure the flush policy to flush data after a period of time or
# every N messages (or both). This can be done globally and overridden on a per-topic basis.

# The number of messages to accept before forcing a flush of data to disk
#log.flush.interval.messages=10000

# The maximum amount of time a message can sit in a log before we force a flush
#log.flush.interval.ms=1000

############################# Log Retention Policy #############################

# The following configurations control the disposal of log segments. The policy can
# be set to delete segments after a period of time, or after a given size has accumulated.
# A segment will be deleted whenever *either* of these criteria are met. Deletion always happens
# from the end of the log.



# A size-based retention policy for logs. Segments are pruned from the log unless the remaining
# segments drop below log.retention.bytes. Functions independently of log.retention.hours.

# topic每个分区的最大文件大小5G，一个topic的大小限制 = 分区数*log.retention.bytes。-1没有大小限,log.retention.bytes和log.retention.hours 任意一个达到要求，都会执行删除(标记为.deleted)
log.retention.bytes=5368709120 

# The maximum size of a log segment file. When this size is reached a new log segment will be created.
# 设置每个segment的大小为200*1024*1024 【200M】,超过大小重新创建新的segment
log.segment.bytes=1073741824

# The interval at which log segments are checked to see if they can be deleted according
# to the retention policies
# 每5分钟【5*60*1000】检查一次是否有segment已经超过[log.retention.hours]h没更新，如果有则标记为.deleted
log.retention.check.interval.ms=300000
# The minimum age of a log file to be eligible for deletion due to age
log.retention.hours=168

############################# Zookeeper #############################

# Zookeeper connection string (see zookeeper docs for details).
# This is a comma separated host:port pairs, each corresponding to a zk
# server. e.g. "127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002".
# You can also append an optional chroot string to the urls to specify the
# root directory for all kafka znodes.
zookeeper.connect=zookeeper:2181

# Timeout in ms for connecting to zookeeper
zookeeper.connection.timeout.ms=6000


############################# Group Coordinator Settings #############################

# The following configuration specifies the time, in milliseconds, that the GroupCoordinator will delay the initial consumer rebalance.
# The rebalance will be further delayed by the value of group.initial.rebalance.delay.ms as new members join the group, up to a maximum of max.poll.interval.ms.
# The default value for this is 3 seconds.
# We override this to 0 here as it makes for a better out-of-the-box experience for development and testing.
# However, in production environments the default value of 3 seconds is more suitable as this will help to avoid unnecessary, and potentially expensive, rebalances during application startup.
group.initial.rebalance.delay.ms=0

# broker server服务端口
port=9092




# 待定的配置项
#
#
# 是否允许自动创建topic，若是false，就需要通过命令创建topic
# auto.create.topics.enable =true 
#
# 表示消息体的最大大小，单位是字节
# message.max.bytes =6525000
#
# 一些后台任务处理的线程数，例如过期消息文件的删除等，一般情况下不需要去做修改
# background.threads =4
#
# 等待IO线程处理的请求队列最大数，若是等待IO的请求超过这个数值，那么会停止接受外部消息，是一种自我保护机制。
# queued.max.requests =500
#
# 日志清理策略选择有：delete和compact主要针对过期数据的处理，delete 为不可恢复；compact 为压缩
# log.cleanup.policy = delete 
#
# 10分钟检查一次是否有被 标记为deleted的segment，如果有将其从文件系统删除
# log.cleaner.backoff.ms=600000
#
# 对于压缩的日志保留的最长时间，也是客户端消费消息的最长时间，同log.retention.minutes/hours的区别在于一个控制未压缩数据，一个控制压缩后的数据。会被topic创建时的指定参数覆盖
# log.cleaner.delete.retention.ms =1day
#
# 是否开启日志压缩
# log.cleaner.enable=false
#
# 日志压缩运行的线程数
# log.cleaner.threads = 2
#
# 日志压缩时候处理的最大大小
# log.cleaner.io.max.bytes.per.second=None
#
# 日志压缩去重时候的缓存空间，在空间允许的情况下，越大越好
# log.cleaner.dedupe.buffer.size=500*1024*1024

# 对于segment日志的索引文件大小限制，会被topic创建时的指定参数覆盖
# log.index.size.max.bytes =10*1024*1024









